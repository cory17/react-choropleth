{"version":3,"sources":["utility.ts","components/MapBrowser.tsx","components/Editor.tsx","map.ts","components/Map.tsx","components/mapComponents.tsx","selectors.ts","actions.ts","components/MapPage.tsx","components/App.tsx","reducers.ts","storeConfiguration.ts","epics.ts","index.tsx"],"names":["INTENSITY_COLORS","createChoropleth","_ref","features","geo","Object","objectWithoutProperties","newFeatures","map","_ref2","index","properties","feature","props","intensity","isIntensityValid","objectSpread","intensities","reduce","result","_ref3","defineProperty","topoToGeo","topo","key","keys","objects","saveChoropleth","fileName","data","text","JSON","stringify","blob","Blob","type","event","MouseEvent","a","document","createElement","download","href","window","URL","createObjectURL","dataset","downloadurl","join","dispatchEvent","saveJSON","_ref4","idSequence","generateID","Item","TopoMenu","toporefs","onSelect","react_default","menu","_onSelect","_x","apply","this","arguments","toString","ref","name","dummyRequest","onSuccess","setTimeout","MapBrowser","handleChange","info","file","status","reader","FileReader","onload","e","target","_this","handleDrop","onerror","handleError","readAsText","originFileObj","onUploadError","unknown","parsed","parse","parseGeographyFile","arcs","transform","length","geojson","onUpload","L","geoJSON","_unused","_this$props$toporefs","card","title","upload","accept","onChange","showUploadList","customRequest","es_button","icon","MapBrowser_TopoMenu","onTopoSelect","React","Component","Column","TabPane","PropertyList","_ref$items","items","value","concat","renderPropertyList","_","Editor_PropertyList","IntensityCell","state","v","setState","handleAfterChange","_this$props","slider","min","max","onAfterChange","tag","color","Editor","loading","regions","onRowClick","onIntensityChange","table","dataSource","rowKey","onRow","record","onClick","dataIndex","render","id","Editor_IntensityCell","LeafletMap","geoLayer","featureLayers","node","config","url","attribution","_config$center","center","_config$zoom","zoom","_config$maxZoom","maxZoom","tileLayer","addTo","refresh","onEachFeature","layer","_feature$properties","style","fillColor","weight","opacity","dashArray","fillOpacity","setStyle","on","click","latlng","fitBounds","getBounds","invalidateSize","removeLayer","MapContext","createContext","LeafletWrapper","onLoad","_this2","className","MapProvider","isLoaded","handleMapLoad","_this3","loadMap","Provider","Map_LeafletWrapper","children","MapGeojson","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","context","addGeojson","fitGeoLayer","prev","_this$props2","removeGeojson","contextType","defaultProps","FeatureZoom","_React$PureComponent","zoomToFeature","onZoomEnd","PureComponent","getGeojson","store","geojsons","geoID","getIntensities","intensityMaps","getRegions","createSelector","intensityMap","rest","getRegion","undefined","getChoropleth","createStructuredSelector","insertChoropleth","httpError","Header","Content","Sider","MapPageContainer","needsZoom","zoomIndex","handleRowClick","handleIntensityChange","newValue","featureID","updateFeature","handleZoomEnd","handleSave","_this$state","layout","theme","width","components_Editor","background","disabled","Map_MapProvider","mapComponents_MapGeojson","mapComponents_FeatureZoom","connect","App","isBrowsing","actions","App_Header","ghost","onNewMapClick","App_Content","MapBrowser_MapBrowser","MapPage","AppContainer","appStatus","handleTopoSelect","find","requestTopojson","handleUpload","handleFileError","message","error","handleNewMapClick","browseMaps","App_App","action","_action$data","_action$data2","_action$data3","rootEpic","combineEpics","action$","getFile","pipe","ofType","pluck","switchMap","catchError","of","insertToporefs","epicMiddleware","createEpicMiddleware","dependencies","ajax","getJSON","rootReducer","combineReducers","reducers","createStore","applyMiddleware","run","ReactDOM","locale_provider","locale","enUS","es","components_App","getElementById"],"mappings":"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","file":"static/js/main.fe2a2a67.chunk.js","sourcesContent":["import { feature } from 'topojson'\nimport { Dict, Store, Region, RegionProps, Feature, Geojson, Topojson, TopoDescriptor, Choropleth } from './models'\n\nexport const MAX_INTENSITY = 7\nexport const INTENSITY_COLORS = ['#FFEDA0',\n    '#FED976',\n    '#FEB24C',\n    '#FD8D3C',\n    '#FC4E2A',\n    '#E31A1C',\n    '#BD0026',\n    '#800026'\n]\n\nexport const createChoropleth = ({ features, ...geo }: Geojson) => {\n\n    const newFeatures = features.map(\n        ({ properties, ...feature }, index) => {\n\n            const props = properties as Dict<any>\n            const { intensity } = props\n\n            const isIntensityValid = typeof intensity === 'number' && intensity <= MAX_INTENSITY\n\n            return {\n                ...feature,\n                properties: {\n                    index,\n                    ...props,\n                    intensity: isIntensityValid ? intensity : 0\n                }\n            }\n        }\n    )\n\n    const intensities = newFeatures.reduce((result, { properties }) => ({\n        ...result,\n        [properties.index]: properties.intensity\n    }), {})\n\n    return {\n        geo: {\n            ...geo,\n            features: newFeatures\n        },\n        intensities\n    }\n}\n\n\nexport function topoToGeo(topo: Topojson): Geojson {\n\n    const key = Object.keys(topo.objects)[0]\n    return feature(topo as any, topo.objects[key]) as Geojson\n}\n\nexport function saveChoropleth(geo: Geojson<RegionProps>, intensities: Dict<number>, fileName: string) {\n\n    saveJSON({\n        ...geo,\n        features: geo.features.map(({ properties, ...feature }) => ({\n            ...feature,\n            properties: {\n                ...properties,\n                intensity: intensities[properties.index]\n            }\n        }))\n    }, fileName)\n}\n\nfunction saveJSON(data: object, fileName: string) {\n\n    const text = JSON.stringify(data)\n    const blob = new Blob([text], { type: 'text/json' })\n    const event = new MouseEvent('click', {})\n\n    const a = document.createElement('a')\n\n    a.download = fileName\n    a.href = window.URL.createObjectURL(blob)\n    a.dataset.downloadurl = ['text/json', a.download, a.href].join(':')\n    a.dispatchEvent(event)\n}\n\n\n\nlet idSequence = 0\n\nexport function generateID() {\n    ++idSequence\n    return idSequence\n}\n\n","import React from 'react'\nimport { Upload, message, List, Menu, Button, Icon, Card } from 'antd'\nimport { UploadChangeParam } from 'antd/lib/upload'\nimport { RcFile } from 'antd/lib/upload/interface'\nimport { TopoRef, Geojson } from '../models'\nimport { topoToGeo } from '../utility'\nimport L from 'leaflet'\nconst { Item } = Menu\n\n\ntype TopoItemProps = {\n\ttoporef: TopoRef\n}\n\ntype TopoMenuProps = {\n\ttoporefs: TopoRef[],\n\tonSelect: (name: string) => void\n}\n\ntype UploadError = 'topojson' | 'geojson' | 'filesystem' | 'parse'\n\ntype Props = {\n\tonUpload: (geo: Geojson) => void,\n\tonTopoSelect: (name: string) => void,\n\ttoporefs: TopoRef[],\n\tonUploadError: (err: UploadError) => void\n}\n\n\nfunction parseGeographyFile(text: string) {\n\n\tconst unknown = { type: 'unknown' }\n\n\ttry {\n\t\tconst parsed = JSON.parse(text)\n\n\t\treturn parsed &&\n\t\t\ttypeof parsed === 'object' &&\n\t\t\ttypeof parsed.type === 'string' ? parsed : unknown\n\t}\n\tcatch (e) {\n\t\treturn unknown\n\t}\n}\n\n\nconst getObjectNames = ({ objects }: TopoJSON.Topology) =>\n\tobjects && typeof objects === 'object' ? Object.keys(objects) : []\n\n\nconst TopoMenu = ({ toporefs, onSelect }: TopoMenuProps) => (\n\t<Menu onSelect={({ key }) => onSelect(key)}>\n\t\t{toporefs.map(ref => (\n\t\t\t<Item key={ref.name}>{ref.name}</Item>\n\t\t))}\n\t</Menu>\n)\n\n//Required by antd upload button\nconst dummyRequest = ({ onSuccess }: { onSuccess: (message: string) => void }) => {\n\tsetTimeout(() => {\n\t\tonSuccess(\"ok\");\n\t}, 0);\n};\n\nexport default class MapBrowser extends React.Component<Props> {\n\n\n\thandleChange = (info: UploadChangeParam) => {\n\n\t\tswitch (info.file.status) {\n\t\t\tcase 'done': {\n\n\t\t\t\tconst reader = new FileReader()\n\n\t\t\t\treader.onload = (e) => {\n\t\t\t\t\tconst { target } = e\n\t\t\t\t\tconst { result } = target as unknown as { result: string }\n\n\t\t\t\t\tthis.handleDrop(result)\n\t\t\t\t}\n\t\t\t\treader.onerror = this.handleError\n\n\t\t\t\treader.readAsText(info.file.originFileObj!)\n\t\t\t}\n\n\t\t}\n\t}\n\n\t//TODO: Figure out what triggers this error\n\thandleError = () => {\n\t\tthis.props.onUploadError('filesystem')\n\t}\n\n\thandleDrop = (text: string) => {\n\n\t\tconst geo = parseGeographyFile(text)\n\n\t\t/*\n\t\t\tgeo.type == 'Topology' -> treat as Topojson file\n\t\t\tgeo.type == 'FeatureCollection' -> treat as Geojson file\n\t\t\totherwise -> display error message\n\t\t*/\n\n\t\tswitch (geo.type) {\n\t\t\tcase 'Topology': {\n\n\t\t\t\tconst {\n\t\t\t\t\ttype,\n\t\t\t\t\tobjects,\n\t\t\t\t\tarcs,\n\t\t\t\t\ttransform\n\t\t\t\t} = (geo)\n\n\t\t\t\tconst isValid = objects &&\n\t\t\t\t\ttypeof objects === 'object' &&\n\t\t\t\t\tObject.keys(objects).length &&\n\t\t\t\t\tarcs\n\n\t\t\t\tif (isValid) {\n\t\t\t\t\tconst objectNames = Object.keys(objects)\n\n\n\t\t\t\t\t/* Keep only the required props */\n\t\t\t\t\tconst topo = transform ? {\n\t\t\t\t\t\ttype, arcs, objects, transform\n\t\t\t\t\t} : {\n\t\t\t\t\t\t\ttype, arcs, objects\n\t\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst geojson = topoToGeo(topo)\n\t\t\t\t\t\tthis.props.onUpload(geojson)\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\tthis.props.onUploadError('topojson')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.props.onUploadError('topojson')\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'FeatureCollection': {\n\n\t\t\t\ttry {\n\t\t\t\t\t/* L.geoJSON validates a geojson */\n\t\t\t\t\tL.geoJSON(geo as any)\n\t\t\t\t\tthis.props.onUpload(geo as Geojson)\n\t\t\t\t}\n\t\t\t\tcatch {\n\t\t\t\t\tthis.props.onUploadError('geojson')\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthis.props.onUploadError('parse')\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { toporefs = [] } = this.props\n\n\t\treturn (\n\t\t\t<Card title='Choose a Geography'>\n\t\t\t\t<Upload accept='application/json'\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tshowUploadList={false}\n\t\t\t\t\tcustomRequest={dummyRequest}>\n\t\t\t\t\t<Button>\n\t\t\t\t\t\t<Icon type=\"upload\" />\n\t\t\t\t\t\t<span>Upload a Saved Choropleth, GeoJSON, or TopoJSON file</span>\n\t\t\t\t\t</Button>\n\t\t\t\t</Upload>\n\t\t\t\t<TopoMenu toporefs={toporefs}\n\t\t\t\t\tonSelect={this.props.onTopoSelect} />\n\t\t\t</Card>\n\t\t)\n\t}\n}\n","import React from 'react'\nimport { Tabs, Table, Tag, Slider } from 'antd'\nimport { feature } from 'topojson'\nimport { Region } from '../models'\nimport { SliderValue } from 'antd/lib/slider'\nimport { MAX_INTENSITY, INTENSITY_COLORS } from '../utility'\nconst { TabPane } = Tabs\nconst { Column } = Table\n\ntype Props = {\n\tloading: boolean,\n\tregions?: Region[],\n\tonRowClick: (r: Region) => void,\n\tonIntensityChange: (id: number, value: number) => void\n}\n\ntype PropItem = {\n\tkey: string,\n\tvalue: any\n}\n\nconst PropertyList = ({ items = [] }: { items: PropItem[] }) => (\n\t<ul>\n\t\t{items.map(({ key, value }) => <li key={key}>{`${key}: ${value}`}</li>)}\n\t</ul>\n)\n\nconst renderPropertyList = (_: any, feature: Region) => (\n\t<PropertyList items={feature.props} />\n)\n\ntype IntensityCellProps = {\n\tindex: number,\n\tintensity: number,\n\tonChange: (id: number, value: number) => void\n}\n\nclass IntensityCell extends React.Component<IntensityCellProps> {\n\n\tstate = {\n\t\tvalue: this.props.intensity\n\t}\n\n\thandleChange = (v: SliderValue) => {\n\t\tthis.setState({ value: v as number })\n\t}\n\n\thandleAfterChange = (v: SliderValue) => {\n\t\tthis.props.onChange(this.props.index, v as number)\n\t}\n\n\trender() {\n\n\t\tconst { value } = this.state\n\t\tconst { index, onChange } = this.props\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Slider value={value}\n\t\t\t\t\tmin={0}\n\t\t\t\t\tmax={MAX_INTENSITY}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tonAfterChange={this.handleAfterChange} />\n\t\t\t\t<Tag color={INTENSITY_COLORS[value]}>{value}</Tag>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst Editor = ({ loading, regions, onRowClick, onIntensityChange }: Props) => (\n\t<Table dataSource={regions}\n\t\tloading={loading}\n\t\trowKey=\"index\"\n\t\tonRow={(record) => ({ onClick: () => onRowClick(record) })}>\n\t\t<Column title=\"Index\"\n\t\t\tdataIndex='index' />\n\t\t<Column title=\"Intensity\"\n\t\t\tdataIndex='intensity'\n\t\t\tkey=\"intensity\"\n\t\t\trender={(intensity, { index }, id) => (\n\t\t\t\t<IntensityCell index={index}\n\t\t\t\t\tintensity={intensity}\n\t\t\t\t\tonChange={onIntensityChange} />\n\t\t\t)} />\n\t\t<Column title=\"Properties\"\n\t\t\tkey=\"properties\"\n\t\t\trender={renderPropertyList} />\n\t</Table>\n)\n\nexport default Editor\n","import L, { LeafletEventHandlerFn } from 'leaflet'\nimport { Dict, Geojson, RegionProps, Feature } from './models'\nimport { INTENSITY_COLORS } from './utility'\n\ntype MapConfig = {\n\turl: string,\n\tattribution: string,\n\tcenter?: [number, number],\n\tzoom?: number,\n\tmaxZoom?: number\n}\n\ntype ControlConstructor = (ops: { position: string }) => L.Control\n\ntype Project = (l: L.LatLng) => L.Point\ntype Unproject = (p: L.Point) => L.LatLng\n\n\nexport default class LeafletMap {\n\n\tmap: L.Map | undefined\n\n\tgeoLayer: L.GeoJSON | undefined\n\tfeatureLayers: Dict<L.Polyline> = {}\n\n\tloadMap(node: HTMLDivElement, config: MapConfig) {\n\n\t\tconst {\n\t\t\turl,\n\t\t\tattribution,\n\t\t\tcenter = [39.8282, -98.5795] as [number, number],\n\t\t\tzoom = 5,\n\t\t\tmaxZoom = 19\n\t\t} = config\n\n\t\tthis.map = L.map(node, {\n\t\t\tcenter,\n\t\t\tzoom,\n\t\t})\n\n\t\tL.tileLayer(url, {\n\t\t\tmaxZoom,\n\t\t\tattribution\n\t\t}).addTo(this.map)\n\n\t\tthis.refresh()\n\t}\n\n\t//Call this.refresh() to update the screen after calling this.addGeojson\n\taddGeojson(\n\t\tgeojson: Geojson<RegionProps>,\n\t\tonClick: (latlng: L.LatLng,\n\t\t\tindex: number) => void\n\t) {\n\n\t\tthis.featureLayers = {}\n\t\tthis.geoLayer = L.geoJSON(geojson, {\n\t\t\tonEachFeature: (feature: Feature<RegionProps>, layer: L.Polyline) => {\n\n\t\t\t\tconst { index, intensity } = feature.properties\n\n\t\t\t\tconst style = {\n\t\t\t\t\tfillColor: INTENSITY_COLORS[intensity],\n\t\t\t\t\tweight: 2,\n\t\t\t\t\topacity: 1,\n\t\t\t\t\tcolor: 'white',\n\t\t\t\t\tdashArray: '3',\n\t\t\t\t\tfillOpacity: 0.7\n\t\t\t\t}\n\n\t\t\t\tconst click = (e: L.LeafletMouseEvent) => {\n\t\t\t\t\tonClick(e.latlng, index)\n\t\t\t\t}\n\n\t\t\t\tlayer.setStyle(style)\n\n\t\t\t\tlayer.on({\n\t\t\t\t\tclick: click as unknown as LeafletEventHandlerFn\n\t\t\t\t})\n\n\t\t\t\tthis.featureLayers[index] = layer\n\t\t\t}\n\t\t})\n\n\t\tthis.geoLayer.addTo(this.map!)\n\t}\n\n\tupdateFeature(index: number, intensity: number) {\n\t\tthis.featureLayers[index].setStyle(\n\t\t\t{ fillColor: INTENSITY_COLORS[intensity] }\n\t\t)\n\t}\n\n\tfitGeoLayer() {\n\t\tthis.map!.fitBounds(this.geoLayer!.getBounds())\n\t}\n\n\trefresh() {\n\t\tthis.map!.invalidateSize()\n\t}\n\n\tzoomToFeature(index: number) {\n\t\tconst layer = this.featureLayers[index]\n\t\tthis.map!.fitBounds(layer.getBounds())\n\t}\n\n\n\tremoveGeojson() {\n\t\tthis.map!.removeLayer(this.geoLayer!)\n\t\tthis.featureLayers = {}\n\t}\n}\n","import React from 'react'\nimport 'leaflet/dist/leaflet.css'\nimport LeafletMap from '../map'\n\ntype Props = {\n\tonLoad: (node: HTMLDivElement) => void\n}\n\ntype ProviderProps = {\n\tonLoad: (map: LeafletMap) => void\n}\n\nconst MapContext = React.createContext<LeafletMap | null>(null)\n\nclass LeafletWrapper extends React.Component<Props> {\n\n\tnode: HTMLDivElement | undefined\n\n\tcomponentDidMount() {\n\t\tthis.props.onLoad(this.node!)\n\t}\n\n\tshouldComponentUpdate() {\n\t\treturn false\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"app-map\"\n\t\t\t\tref={node => { this.node = node! }} />\n\t\t)\n\t}\n}\n\nexport default class MapProvider extends React.Component<ProviderProps> {\n\n\tstate = {\n\t\tmap: new LeafletMap(),\n\t\tisLoaded: false\n\t}\n\n\thandleMapLoad = (node: HTMLDivElement) => {\n\n\t\tthis.state.map.loadMap(node, {\n\t\t\turl: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n\t\t\tattribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n\t\t})\n\n\t\tthis.setState({ isLoaded: true })\n\n\t\tthis.props.onLoad(this.state.map)\n\t}\n\n\trender() {\n\t\tconst { isLoaded } = this.state\n\n\t\treturn (\n\t\t\t<MapContext.Provider value={this.state.map}>\n\t\t\t\t<div className=\"map-container\">\n\t\t\t\t\t<LeafletWrapper onLoad={this.handleMapLoad} />\n\t\t\t\t\t{isLoaded ? this.props.children : null}\n\t\t\t\t</div>\n\t\t\t</MapContext.Provider>\n\t\t)\n\t}\n}\n\nexport { MapContext }\n","import React from 'react'\nimport { Geojson, RegionProps } from '../models'\nimport { MapContext } from './Map'\n\n\ntype MapGeojsonProps = {\n\tgeojson: Geojson<RegionProps>,\n\tonClick: (latlng: [number, number], index: number) => void,\n\tchildren?: any\n}\n\ntype FeatureZoomProps = {\n\tindex: number,\n\tonZoomEnd: () => void\n}\n\n\nexport class MapGeojson extends React.Component<MapGeojsonProps> {\n\n\tstatic contextType = MapContext\n\n\tstatic defaultProps = {\n\t\tonClick: () => { }\n\t}\n\n\n\tcomponentDidMount() {\n\t\tconst map = this.context\n\n\t\tconst { geojson, onClick } = this.props\n\n\t\tmap.addGeojson(geojson, onClick)\n\t\tmap.refresh()\n\t\tmap.fitGeoLayer()\n\t}\n\n\tcomponentDidUpdate(prev: MapGeojsonProps) {\n\t\tconst map = this.context\n\t\tconst { geojson, onClick } = this.props\n\n\t\tif (this.props.geojson !== prev.geojson) {\n\n\t\t\tmap.removeGeojson()\n\n\t\t\tmap.addGeojson(geojson, onClick)\n\t\t\tmap.fitGeoLayer()\n\t\t\tmap.refresh()\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tconst map = this.context\n\t\tmap.removeGeojson()\n\t}\n\n\tremove() {\n\t\tconst map = this.context\n\t\tmap.removeGeojson()\n\t}\n\n\trender() {\n\t\treturn this.props.children ? this.props.children : null\n\t}\n}\n\n\nexport class FeatureZoom extends React.PureComponent<FeatureZoomProps> {\n\n\tstatic contextType = MapContext\n\n\n\tcomponentDidMount() {\n\t\tconst map = this.context\n\t\tconst { index } = this.props\n\n\t\tmap.zoomToFeature(index)\n\t\tthis.props.onZoomEnd()\n\t}\n\n\trender() { return null }\n}\n","import { createSelector, createStructuredSelector, ParametricSelector } from 'reselect'\nimport { feature } from 'topojson'\nimport { Choropleth, Dict, Store, Region, RegionProps, Geojson} from './models'\n\ntype Props = {\n    geoID: number\n}\n\nfunction getGeojson(store: Store, props: Props): Geojson<RegionProps> | undefined {\n    return store.geojsons[props.geoID]\n}\n\nfunction getIntensities(store: Store, props: Props): Dict<number> | undefined {\n    return store.intensityMaps[props.geoID]\n}\n\n\nfunction getRegion(props: RegionProps, intensity: number) {\n\n    const {\n        index,\n        intensity: initialIntensity,\n        ...rest\n    } = props\n\n    return {\n        index,\n        intensity,\n        props: Object.keys(rest).map(\n            key => ({ key, value: props[key] })\n        )\n    }\n}\n\nconst getRegions = createSelector(\n    getGeojson,\n    getIntensities,\n    (geo, intensityMap) => geo ? geo.features.map(\n        ({ properties }) => getRegion(properties, intensityMap![properties.index])\n    ) : undefined\n)\n\n\nexport const getChoropleth: ParametricSelector<Store, Props, Choropleth> = createStructuredSelector({\n    loading: ({ geojsons }: Store, { geoID }: Props) => !geojsons[geoID],\n    geojson: getGeojson,\n    intensities: getIntensities,\n    regions: getRegions\n})","import { topoToGeo, createChoropleth } from './utility'\nimport { TopoRef, Geojson } from './models'\n\n\nexport const browseMaps = () => ({\n    type: 'browse maps',\n    data: {}\n})\n\nexport const insertChoropleth = (id: number, geo: Geojson) => ({\n    type: 'insert choropleth',\n    data: {\n        id,\n        ...createChoropleth(geo)\n    }\n})\n\n\n\nexport const requestTopojson = (name: string, key: string, id: number) => ({\n    type: 'request topojson',\n    data: {\n        id,\n        name,\n        key\n    }\n})\n\nexport const insertToporefs = (toporefs: TopoRef[]) => ({\n    type: 'insert toporefs',\n    data: { toporefs }\n})\n\n\n\nexport const updateIntensity = (\n    geoID: number,\n    featureID: number,\n    newValue: number\n) => ({\n    type: 'update intensity',\n    data: {\n        geoID,\n        featureID,\n        newValue\n    }\n})\n\nexport const httpError = (type: string, info: object = {}) => ({\n    type: 'http error',\n    data: {\n        type,\n        ...info\n    }\n})\n\n\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { Layout, Button, Input } from 'antd'\nimport Editor from './Editor'\nimport Map from './Map'\nimport { MapGeojson, FeatureZoom } from './mapComponents'\nimport { Store, Choropleth } from '../models'\nimport { getChoropleth } from '../selectors'\nimport LeafletMap from '../map'\nimport { updateIntensity } from '../actions'\nimport { saveChoropleth } from '../utility'\n\nconst { Header, Content, Sider } = Layout\n\ntype Props = {\n\tgeoID: number,\n} & Choropleth & DispatchProps\n\ntype DispatchProps = {\n\tonIntensityChange: (mapID: number, featureID: number, newValue: number) => void\n}\n\ntype State = {\n\tneedsZoom: boolean,\n\tzoomIndex: number,\n\tmap?: LeafletMap\n}\n\n\nclass MapPageContainer extends React.Component<Props, State> {\n\n\tstate: State = {\n\t\tneedsZoom: false,\n\t\tzoomIndex: 0\n\t}\n\n\n\thandleRowClick = ({ index }: { index: number }) => this.setState({\n\t\t...this.state,\n\t\tneedsZoom: true,\n\t\tzoomIndex: index,\n\t})\n\n\thandleIntensityChange = (id: number, newValue: number) => {\n\n\t\tconst { geoID } = this.props\n\t\tconst featureID = id\n\n\t\tthis.props.onIntensityChange(geoID, featureID, newValue)\n\t\tthis.state.map!.updateFeature(id, newValue)\n\t}\n\n\thandleZoomEnd = () => this.setState({ needsZoom: false })\n\n\thandleMapLoad = (map: LeafletMap) => {\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tmap\n\t\t})\n\t}\n\n\thandleSave = () => {\n\n\t\tconst { geojson, intensities } = this.props\n\n\t\tsaveChoropleth(geojson!, intensities!, 'choropleth.json')\n\t}\n\n\trender() {\n\n\t\tconst { geojson, regions, loading } = this.props\n\t\tconst { needsZoom, zoomIndex } = this.state\n\n\t\treturn (\n\t\t\t<Layout className='app-content'>\n\t\t\t\t<Sider className='app-sider'\n\t\t\t\t\ttheme='light'\n\t\t\t\t\twidth={400}>\n\t\t\t\t\t<Editor loading={loading}\n\t\t\t\t\t\tregions={regions}\n\t\t\t\t\t\tonRowClick={this.handleRowClick}\n\t\t\t\t\t\tonIntensityChange={this.handleIntensityChange} />\n\t\t\t\t</Sider>\n\t\t\t\t<Content>\n\t\t\t\t\t<Layout className='app-content'>\n\t\t\t\t\t\t<Header style={{ background: '#f2f2f2' }}>\n\t\t\t\t\t\t\t<Button icon='save'\n\t\t\t\t\t\t\t\tdisabled={loading}\n\t\t\t\t\t\t\t\tonClick={this.handleSave}>Save</Button>\n\t\t\t\t\t\t</Header>\n\t\t\t\t\t\t<Content>\n\t\t\t\t\t\t\t<Map onLoad={this.handleMapLoad}>\n\t\t\t\t\t\t\t\t{geojson &&\n\t\t\t\t\t\t\t\t\t<MapGeojson geojson={geojson}>\n\t\t\t\t\t\t\t\t\t\t{needsZoom &&\n\t\t\t\t\t\t\t\t\t\t\t<FeatureZoom index={zoomIndex}\n\t\t\t\t\t\t\t\t\t\t\t\tonZoomEnd={this.handleZoomEnd} />\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</MapGeojson>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Map>\n\t\t\t\t\t\t</Content>\n\t\t\t\t\t</Layout>\n\t\t\t\t</Content>\n\t\t\t</Layout>\n\t\t)\n\t}\n}\n\nexport default connect<Choropleth, DispatchProps, { geoID: number }, Store>(\n\tgetChoropleth,\n\t{ onIntensityChange: updateIntensity }\n)(MapPageContainer)","import React from 'react'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport { Layout, Button, message } from 'antd'\nimport MapBrowser from './MapBrowser'\nimport { History } from 'history'\nimport MapPage from './MapPage'\nimport { Store, Geojson, TopoRef } from '../models'\nimport { browseMaps, requestTopojson, insertChoropleth } from '../actions'\nimport { generateID } from '../utility'\nconst { Header, Content } = Layout\n\n\ntype AppStatus = 'browsing' | 'mapping'\n\ntype Props = {\n    toporefs: TopoRef[],\n    browseMaps: () => void,\n    requestTopojson: (name: string, key: string, id: number) => void,\n    onUpload: (id: number, geo: Geojson) => void\n}\n\ntype State = {\n    appStatus: AppStatus,\n    geoID?: number\n}\n\ntype AppProps = {\n    isBrowsing: boolean,\n    geoID?: number,\n    toporefs: TopoRef[],\n    onTopoSelect: (name: string) => void,\n    onUpload: (geo: Geojson) => void,\n    onUploadError: () => void,\n    onNewMapClick: () => void\n}\n\n\nconst App = ({ isBrowsing, geoID, toporefs, ...actions }: AppProps) => (\n    <Layout className='app'>\n        <Header>\n\n            <Button ghost={true}\n                onClick={actions.onNewMapClick} >New Map</Button>\n\n        </Header>\n        <Content>\n            {isBrowsing ? <MapBrowser toporefs={toporefs}\n                onTopoSelect={actions.onTopoSelect}\n                onUpload={actions.onUpload}\n                onUploadError={actions.onUploadError} /> :\n                <MapPage geoID={geoID!} />}\n        </Content>\n    </Layout>\n)\n\n\nclass AppContainer extends React.Component<Props, State> {\n\n    state: State = {\n        appStatus: 'browsing'\n    }\n\n\n    handleTopoSelect = (name: string) => {\n        const { toporefs } = this.props\n        const { key } = toporefs.find(({ name: n }) => n == name)!\n        this.setState({\n            appStatus: 'mapping',\n            geoID: generateID()\n        }, () => {\n            this.props.requestTopojson(name, key, this.state.geoID!)\n        })\n    }\n\n    handleUpload = (geo: Geojson) => {\n        this.setState({\n            appStatus: 'mapping',\n            geoID: generateID()\n        }, () => {\n            const id = this.state.geoID!\n            this.props.onUpload(id, geo)\n        })\n    }\n\n    handleFileError = () => {\n        message.error('ERROR: Could not load file')\n    }\n\n\n    handleNewMapClick = () => {\n        this.setState({\n            appStatus: 'browsing'\n        })\n    }\n\n    componentDidMount() { this.props.browseMaps() }\n\n\n    render() {\n\n        const { geoID } = this.state\n\n        const {\n            toporefs,\n            requestTopojson\n        } = this.props\n\n        const { appStatus } = this.state\n        const isBrowsing = appStatus == 'browsing'\n\n        return <App isBrowsing={isBrowsing}\n            geoID={geoID}\n            toporefs={toporefs}\n            onUploadError={this.handleFileError}\n            onUpload={this.handleUpload}\n            onTopoSelect={this.handleTopoSelect}\n            onNewMapClick={this.handleNewMapClick} />\n\n    }\n}\n\nexport default connect(\n    ({ toporefs }: Store) => ({\n        toporefs\n    }),\n    {\n        browseMaps,\n        requestTopojson,\n        onUpload: insertChoropleth\n    }\n)(AppContainer)\n\n","import { TopoRef, IntensityMapStore, GeojsonStore } from './models'\nimport { Reducer } from 'redux'\n\n\nexport const geojsons: Reducer<GeojsonStore> = (state = {}, action) => {\n\n    switch (action.type) {\n        case 'insert choropleth': {\n\n            const { geo, id } = action.data\n\n            return {\n                ...state,\n                [id]: geo\n            }\n        }\n        default: return state\n    }\n}\n\nexport const toporefs: Reducer<TopoRef[]> = (state = [], action) => {\n\n    switch (action.type) {\n        case 'insert toporefs':\n            return action.data.toporefs\n        default: return state\n    }\n}\n\nexport const intensityMaps: Reducer<IntensityMapStore> = (state = {}, action) => {\n\n    switch (action.type) {\n        case 'insert choropleth': {\n            const { id, intensities } = action.data\n            return {\n                ...state,\n                [id]: intensities\n            }\n        }\n        case 'update intensity': {\n            const { geoID, featureID, newValue } = action.data\n            return {\n                ...state,\n                [geoID]: {\n                    ...state[geoID],\n                    [featureID]: newValue\n                }\n            }\n        }\n        default: return state\n    }\n}","import { composeWithDevTools } from 'redux-devtools-extension' \nimport { combineReducers, createStore, applyMiddleware } from 'redux'\nimport { combineEpics, createEpicMiddleware } from 'redux-observable'\nimport { ajax } from 'rxjs/ajax'\nimport * as epics from './epics'\nimport * as reducers from './reducers'\n\nconst base = 'https://raw.githubusercontent.com/cory17/react-choropleth/master/api/'\n\nconst getFile = (url: string) => ajax.getJSON(base + url)\n\nconst rootEpic = combineEpics(\n    epics.topojson,\n    epics.toporefs\n)\n\nconst epicMiddleware = createEpicMiddleware(\n    { dependencies: { getFile } }\n)\n\n\nconst rootReducer = combineReducers(reducers)\n\n\nconst store = createStore(\n    rootReducer,\n    {},\n    process.env.NODE_ENV === 'development' ? composeWithDevTools(\n        applyMiddleware(\n            epicMiddleware\n        )\n    ) : applyMiddleware(\n        epicMiddleware\n    )\n)\n\nepicMiddleware.run(rootEpic)\n\nexport default store\n","import { switchMap, map, catchError, pluck } from 'rxjs/operators'\nimport { of, pipe } from 'rxjs'\nimport { Epic, ofType } from 'redux-observable'\nimport * as actions from './actions'\nimport { insertChoropleth, insertToporefs, httpError } from './actions'\nimport { Topojson, TopoRef } from './models'\nimport { topoToGeo } from './utility'\n\nexport const topojson: Epic = (action$, _, { getFile }) => action$\n\t.pipe(\n\t\tofType('request topojson'),\n\t\tpluck('data'),\n\t\tswitchMap(({ id, key, name }) => getFile(`topojson/${name}.json`)\n\t\t\t.pipe(\n\t\t\t\tmap((topo: Topojson) => insertChoropleth(id, topoToGeo(topo))),\n\t\t\t\tcatchError(() => of(httpError('topojson', { id })))\n\t\t\t)\n\t\t)\n\t)\n\nexport const toporefs: Epic = (action$, _, { getFile }) => action$\n\t.pipe(\n\t\tofType('browse maps'),\n\t\tswitchMap(() => getFile('toporefs.json')\n\t\t\t.pipe(\n\t\t\t\tmap(({ toporefs }: { toporefs: TopoRef[] }) => insertToporefs(toporefs)),\n\t\t\t\tcatchError(() => of(httpError('toporefs')))\n\t\t\t)\n\t\t)\n\t)\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { LocaleProvider } from 'antd'\nimport enUS from 'antd/lib/locale-provider/en_US'\nimport './index.css'\nimport App from './components/App'\nimport store from './storeConfiguration'\n\nReactDOM.render(\n    <LocaleProvider locale={enUS}>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </LocaleProvider>,\n    document.getElementById('root')\n)\n\n"],"sourceRoot":""}