{"version":3,"sources":["utility.ts","components/MapBrowser.tsx","components/Editor.tsx","map.ts","components/Map.tsx","components/mapComponents.tsx","selectors.ts","actions.ts","components/MapPage.tsx","components/App.tsx","reducers.ts","storeConfiguration.ts","epics.ts","index.tsx"],"names":["createChoropleth","_ref","features","geo","Object","objectWithoutProperties","newFeatures","map","_ref2","index","properties","feature","props","intensity","isIntensityValid","objectSpread","intensities","reduce","result","_ref3","defineProperty","topoToGeo","topo","key","keys","objects","saveChoropleth","fileName","data","text","JSON","stringify","blob","Blob","type","event","MouseEvent","a","document","createElement","download","href","window","URL","createObjectURL","dataset","downloadurl","join","dispatchEvent","saveJSON","_ref4","Item","TopoMenu","toporefs","onSelect","react_default","menu","_onSelect","_x","apply","this","arguments","toString","ref","name","dummyRequest","onSuccess","setTimeout","MapBrowser","handleChange","info","file","status","reader","FileReader","onload","e","target","_this","handleDrop","onerror","handleError","readAsText","originFileObj","onUploadError","unknown","parsed","parse","parseGeographyFile","arcs","transform","length","geojson","onUpload","L","geoJSON","_unused","_this$props$toporefs","card","title","upload","accept","onChange","showUploadList","customRequest","es_button","icon","MapBrowser_TopoMenu","onTopoSelect","React","Component","Column","TabPane","PropertyList","_ref$items","items","value","concat","renderPropertyList","_","Editor_PropertyList","colors","IntensityCell","state","v","setState","handleAfterChange","_this$props","slider","min","max","onAfterChange","tag","color","Editor","loading","regions","onRowClick","onIntensityChange","table","dataSource","rowKey","onRow","record","onClick","dataIndex","render","id","Editor_IntensityCell","LeafletMap","geoLayer","featureLayers","node","config","url","attribution","_config$center","center","_config$zoom","zoom","_config$maxZoom","maxZoom","tileLayer","addTo","refresh","on","popup","project","unproject","loc","_latlng","y","_container","clientHeight","panTo","animate","_this2","onEachFeature","layer","_feature$properties","style","fillColor","weight","opacity","dashArray","fillOpacity","setStyle","click","latlng","fitBounds","getBounds","invalidateSize","removeLayer","MapContext","createContext","LeafletWrapper","onLoad","className","MapProvider","isLoaded","handleMapLoad","_this3","loadMap","Provider","Map_LeafletWrapper","children","MapGeojson","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","context","addGeojson","fitGeoLayer","prev","_this$props2","removeGeojson","contextType","defaultProps","FeatureZoom","_React$PureComponent","zoomToFeature","onZoomEnd","PureComponent","getGeojson","store","geojsons","geoID","getIntensities","intensityMaps","getRegions","createSelector","intensityMap","rest","getRegion","undefined","insertChoropleth","httpError","Header","Content","Sider","MapPageContainer","needsZoom","zoomIndex","handleRowClick","handleIntensityChange","newValue","featureID","updateIntensity","updateFeature","handleZoomEnd","handleSaveFormSubmit","console","log","handleSave","_this$state","layout","theme","width","components_Editor","background","disabled","Map_MapProvider","mapComponents_MapGeojson","mapComponents_FeatureZoom","connect","s","p","App","isBrowsing","actions","App_Header","ghost","onNewMapClick","App_Content","react_router","path","MapBrowser_MapBrowser","MapPage","to","AppContainer","appStatus","handleTopoSelect","find","Date","now","requestTopojson","handleUpload","handleFileError","message","error","handleAuthentication","history","push","handleNewMapClick","browseMaps","App_App","onAuthentication","compose","withRouter","action","_action$data","_action$data2","_action$data3","rootEpic","combineEpics","action$","getFile","pipe","ofType","pluck","switchMap","catchError","of","insertToporefs","epicMiddleware","createEpicMiddleware","dependencies","ajax","getJSON","rootReducer","combineReducers","reducers","createStore","applyMiddleware","run","ReactDOM","locale_provider","locale","enUS","es","react_router_dom","components_App","getElementById"],"mappings":"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","file":"static/js/main.46f340b7.chunk.js","sourcesContent":["import { feature } from 'topojson'\nimport { Dict, Store, Region, RegionProps, Feature, Geojson, Topojson, TopoDescriptor, Choropleth} from './models'\n\n\nconst defaultIntensity = 0\nconst maxIntensity = 7\n\n\n\nexport const createChoropleth = ({features, ...geo}: Geojson): Choropleth => {\n\n    const newFeatures = features.map( \n        ({properties, ...feature}, index) => {\n\n            const props = properties as Dict<any>\n            const {intensity} = props\n\n            const isIntensityValid = typeof intensity === 'number' && intensity < maxIntensity\n\n            return {\n                ...feature,\n                properties: {\n                    index,\n                    ...props,\n                    intensity: isIntensityValid ? intensity : defaultIntensity\n             }\n        }\n        }\n    )\n\n    const intensities = newFeatures.reduce((result, {properties}) => ({\n        ...result,\n        [properties.index]: properties.intensity\n    }), {})\n\n    return {\n        geo: {\n            ...geo,\n            features: newFeatures\n        },\n        intensities\n    }\n}\n\n\nexport function topoToGeo(topo: Topojson): Geojson {\n\n    const key = Object.keys(topo.objects)[0]\n    return feature(topo as any, topo.objects[key]) as Geojson\n}\n\nexport function saveChoropleth(geo: Geojson<RegionProps>, intensities: Dict<number>, fileName: string) {\n\n    saveJSON({\n        ...geo,\n        features: geo.features.map( ({properties, ...feature}) => ({\n            ...feature,\n            properties: {\n                ...properties,\n                intensity: intensities[properties.index]\n            }\n        }))\n    }, fileName)\n}\n\nfunction saveJSON(data: object, fileName: string) {\n\n    const text = JSON.stringify(data)\n    const blob = new Blob([text], {type: 'text/json'})\n    const event = new MouseEvent('click', {})\n\n    const a = document.createElement('a')\n\n    a.download = fileName\n    a.href = window.URL.createObjectURL(blob)\n    a.dataset.downloadurl = ['text/json', a.download, a.href].join(':')\n    a.dispatchEvent(event)\n}\n\n\n","import React from 'react'\nimport { Upload, message, List, Menu, Button, Icon, Card }from 'antd'\nimport { UploadChangeParam } from 'antd/lib/upload';\nimport { RcFile } from 'antd/lib/upload/interface';\nimport { TopoRef, Geojson } from '../models'\nimport {topoToGeo} from '../utility'\nimport L from 'leaflet'\nconst {Item} = Menu\n\n\n\ntype TopoItemProps = {\n\ttoporef: TopoRef\n}\n\ntype TopoMenuProps = {\n\ttoporefs: TopoRef[],\n\tonSelect: (name: string) => void\n}\n\ntype UploadError = 'topojson' | 'geojson' | 'filesystem' | 'parse'\n\ntype Props = {\n\tonUpload: (geo: Geojson) => void,\n\tonTopoSelect: (name: string) => void,\n\ttoporefs: TopoRef[],\n\tonUploadError: (err: UploadError) => void\n}\n\n\n\nfunction parseGeographyFile(text: string) {\n\n\tconst unknown = { type: 'unknown' }\n\n\ttry {\n\t\tconst parsed = JSON.parse(text)\n\n\t\treturn parsed &&\n\t\t\ttypeof parsed === 'object' &&\n\t\t\ttypeof parsed.type === 'string' ? parsed : unknown\n\t}\n\tcatch (e) {\n\t\treturn unknown\n\t}\n}\n\n\nconst getObjectNames = ({ objects }: TopoJSON.Topology) =>\n\tobjects && typeof objects === 'object' ? Object.keys(objects) : []\n\n\nconst TopoMenu = ({ toporefs, onSelect }: TopoMenuProps) => (\n\t<Menu onSelect={({ key }) => onSelect(key)}>\n\t\t{toporefs.map(ref => (\n\t\t\t<Item key={ref.name}>{ref.name}</Item>\n\t\t))}\n\t</Menu>\n)\n\n//Required by antd upload button\nconst dummyRequest = ({ onSuccess }: { onSuccess: (message: string) => void }) => {\n\tsetTimeout(() => {\n\t\tonSuccess(\"ok\");\n\t}, 0);\n};\n\nexport default class MapBrowser extends React.Component<Props> {\n\n\n\thandleChange = (info: UploadChangeParam) => {\n\n\t\tswitch (info.file.status) {\n\t\t\tcase 'done': {\n\n\t\t\t\tconst reader = new FileReader()\n\n\t\t\t\treader.onload = (e) => {\n\t\t\t\t\tconst { target } = e\n\t\t\t\t\tconst { result } = target as unknown as { result: string }\n\n\t\t\t\t\tthis.handleDrop(result)\n\t\t\t\t}\n\t\t\t\treader.onerror = this.handleError\n\n\t\t\t\treader.readAsText(info.file.originFileObj!)\n\t\t\t}\n\n\t\t}\n\t}\n\n\t//TODO: Figure out what triggers this error\n\thandleError = () => {\n\t\tthis.props.onUploadError('filesystem')\n\t}\n\n\thandleDrop = (text: string) => {\n\t\tconst geo = parseGeographyFile(text)\n\n\t\tswitch (geo.type) {\n\t\t\tcase 'Topology': {\n\n\t\t\t\tconst {\n\t\t\t\t\ttype,\n\t\t\t\t\tobjects,\n\t\t\t\t\tarcs,\n\t\t\t\t\ttransform\n\t\t\t\t} = (geo)\n\n\t\t\t\tconst isValid = objects &&\n\t\t\t\t\ttypeof objects === 'object' &&\n\t\t\t\t\tObject.keys(objects).length &&\n\t\t\t\t\tarcs\n\n\t\t\t\tif (isValid) {\n\t\t\t\t\tconst objectNames = Object.keys(objects)\n\n\n\t\t\t\t\t/* Keep only the required props */\n\t\t\t\t\tconst topo = transform ? {\n\t\t\t\t\t\ttype, arcs, objects, transform\n\t\t\t\t\t} : {\n\t\t\t\t\t\t\ttype, arcs, objects\n\t\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst geojson = topoToGeo(topo)\n\t\t\t\t\t\tthis.props.onUpload(geojson)\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\tthis.props.onUploadError('topojson')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.props.onUploadError('topojson')\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'FeatureCollection': {\n\n\t\t\t\ttry {\n\t\t\t\t\t/* L.geoJSON validates a geojson */\n\t\t\t\t\tL.geoJSON(geo as any)\n\t\t\t\t\tthis.props.onUpload(geo as Geojson)\n\t\t\t\t}\n\t\t\t\tcatch {\n\t\t\t\t\tthis.props.onUploadError('geojson')\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthis.props.onUploadError('parse')\n\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { toporefs = [] } = this.props\n\n\t\treturn (\n\t\t\t<Card title='Choose a Geography'>\n\t\t\t\t<Upload accept='application/json'\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tshowUploadList={false}\n\t\t\t\t\tcustomRequest={dummyRequest}>\n\t\t\t\t\t<Button>\n\t\t\t\t\t\t<Icon type=\"upload\" />\n\t\t\t\t\t\t<span>Upload a Saved Choropleth, GeoJSON, or TopoJSON file</span>\n\t\t\t\t\t</Button>\n\t\t\t\t</Upload>\n\t\t\t\t<TopoMenu toporefs={toporefs}\n\t\t\t\t\tonSelect={this.props.onTopoSelect} />\n\t\t\t</Card>\n\t\t)\n\t}\n}\n","import React from 'react'\nimport { Tabs, Table, Tag, Slider } from 'antd'\nimport { feature } from 'topojson'\nimport { Region } from '../models'\nimport { SliderValue } from 'antd/lib/slider';\nconst {TabPane} = Tabs\nconst {Column} = Table\n\ntype Props = {\n\tloading: boolean,\n\tregions?: Region[],\n\tonRowClick: (r: Region) => void,\n\tonIntensityChange: (id: number, value: number) => void\n}\n\ntype PropItem = {\n\tkey: string,\n\tvalue: any\n}\n\nconst PropertyList = ({ items = [] }: { items: PropItem[] }) => (\n\t<ul>\n\t\t{items.map(({ key, value }) => <li key={key}>{`${key}: ${value}`}</li>)}\n\t</ul>\n)\n\nconst renderPropertyList = (_: any, feature: Region) => (\n\t<PropertyList items={feature.props} />\n)\n\nconst colors = ['#FFEDA0',\n\t'#FED976',\n\t'#FEB24C',\n\t'#FD8D3C',\n\t'#FC4E2A',\n\t'#E31A1C',\n\t'#BD0026',\n\t'#800026'\n]\n\nconst renderColor = (intensity: number) => (\n\t<div>\n\t\t<Slider min={0} max={7} />\n\t\t<Tag color={colors[intensity]}>{intensity}</Tag>\n\t</div>\n)\n\ntype IntensityCellProps = {\n\tindex: number,\n\tintensity: number,\n\tonChange: (id: number, value: number) => void\n}\n\nclass IntensityCell extends React.Component<IntensityCellProps> {\n\n\tstate = {\n\t\tvalue: this.props.intensity\n\t}\n\n\thandleChange = (v: SliderValue) => {\n\t\tthis.setState({ value: v as number })\n\t}\n\n\thandleAfterChange = (v: SliderValue) => {\n\t\tthis.props.onChange(this.props.index, v as number)\n\t}\n\n\trender() {\n\n\t\tconst { value } = this.state\n\t\tconst { index, onChange } = this.props\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Slider value={value}\n\t\t\t\t\tmin={0}\n\t\t\t\t\tmax={7}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tonAfterChange={this.handleAfterChange} />\n\t\t\t\t<Tag color={colors[value]}>{value}</Tag>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst Editor = ({ loading, regions, onRowClick, onIntensityChange }: Props) => (\n\t<Table dataSource={regions}\n\t\tloading={loading}\n\t\trowKey=\"index\"\n\t\tonRow={(record) => ({ onClick: () => onRowClick(record) })}>\n\t\t<Column title=\"Index\"\n\t\t\tdataIndex='index' />\n\t\t<Column title=\"Intensity\"\n\t\t\tdataIndex='intensity'\n\t\t\tkey=\"intensity\"\n\t\t\trender={(intensity, { index }, id) => (\n\t\t\t\t<IntensityCell index={index}\n\t\t\t\t\tintensity={intensity}\n\t\t\t\t\tonChange={onIntensityChange} />\n\t\t\t)} />\n\t\t<Column title=\"Properties\"\n\t\t\tkey=\"properties\"\n\t\t\trender={renderPropertyList} />\n\t</Table>\n)\n\nexport default Editor\n","import L, { LeafletEventHandlerFn } from 'leaflet'\nimport { Dict, Geojson, RegionProps, Feature } from './models'\n\ntype MapConfig = {\n\turl: string,\n\tattribution: string,\n\tcenter?: [number, number],\n\tzoom?: number,\n\tmaxZoom?: number\n}\n\ntype Popup = {\n\t_latlng: L.LatLng,\n\t_container: {\n\t\tclientHeight: number\n\t}\n}\n\n\ntype ControlConstructor = (ops: { position: string }) => L.Control\n\ntype Project = (l: L.LatLng) => L.Point\ntype Unproject = (p: L.Point) => L.LatLng\n\nconst colors = ['#FFEDA0',\n\t'#FED976',\n\t'#FEB24C',\n\t'#FD8D3C',\n\t'#FC4E2A',\n\t'#E31A1C',\n\t'#BD0026',\n\t'#800026'\n]\n\n\nexport default class LeafletMap {\n\n\tmap: L.Map | undefined\n\n\tgeoLayer: L.GeoJSON | undefined\n\tfeatureLayers: Dict<L.Polyline> = {}\n\n\tloadMap(node: HTMLDivElement, config: MapConfig) {\n\n\t\tconst {\n\t\t\turl,\n\t\t\tattribution,\n\t\t\tcenter = [39.8282, -98.5795] as [number, number],\n\t\t\tzoom = 5,\n\t\t\tmaxZoom = 19\n\t\t} = config\n\n\t\tthis.map = L.map(node, {\n\t\t\tcenter,\n\t\t\tzoom,\n\t\t})\n\n\t\tL.tileLayer(url, {\n\t\t\tmaxZoom,\n\t\t\tattribution\n\t\t}).addTo(this.map)\n\n\t\tthis.refresh()\n\n\t\tthis.map.on('popupopen', e => {\n\n\t\t\tconst event = e as L.PopupEvent\n\t\t\tconst popup = event.popup as unknown as Popup\n\t\t\tconst project = this.map!.project as unknown as Project\n\t\t\tconst unproject = this.map!.unproject as unknown as Unproject\n\n\t\t\tconst loc = project(popup._latlng)\n\n\t\t\tloc.y -= popup._container.clientHeight / 2\n\n\t\t\tthis.map!.panTo(\n\t\t\t\tunproject(loc), {\n\t\t\t\t\tanimate: true\n\t\t\t\t}\n\t\t\t)\n\t\t})\n\t}\n\n\t//Call this.refresh() to update the screen after calling this.addGeojson\n\taddGeojson(\n\t\tgeojson: Geojson<RegionProps>,\n\t\tonClick: (latlng: L.LatLng,\n\t\t\tindex: number) => void\n\t) {\n\n\t\tthis.featureLayers = {}\n\t\tthis.geoLayer = L.geoJSON(geojson, {\n\t\t\tonEachFeature: (feature: Feature<RegionProps>, layer: L.Polyline) => {\n\n\t\t\t\tconst { index, intensity } = feature.properties\n\n\t\t\t\tconst style = {\n\t\t\t\t\tfillColor: colors[intensity],\n\t\t\t\t\tweight: 2,\n\t\t\t\t\topacity: 1,\n\t\t\t\t\tcolor: 'white',\n\t\t\t\t\tdashArray: '3',\n\t\t\t\t\tfillOpacity: 0.7\n\t\t\t\t}\n\n\t\t\t\tconst click = (e: L.LeafletMouseEvent) => {\n\t\t\t\t\tonClick(e.latlng, index)\n\t\t\t\t}\n\n\t\t\t\tlayer.setStyle(style)\n\n\t\t\t\tlayer.on({\n\t\t\t\t\tclick: click as unknown as LeafletEventHandlerFn\n\t\t\t\t})\n\n\t\t\t\tthis.featureLayers[index] = layer\n\t\t\t}\n\t\t})\n\n\t\tthis.geoLayer.addTo(this.map!)\n\t}\n\n\tupdateFeature(index: number, intensity: number) {\n\t\tthis.featureLayers[index].setStyle(\n\t\t\t{ fillColor: colors[intensity] }\n\t\t)\n\t}\n\n\tfitGeoLayer() {\n\t\tthis.map!.fitBounds(this.geoLayer!.getBounds())\n\t}\n\n\trefresh() {\n\t\tthis.map!.invalidateSize()\n\t}\n\n\tzoomToFeature(index: number) {\n\t\tconst layer = this.featureLayers[index]\n\t\tthis.map!.fitBounds(layer.getBounds())\n\t}\n\n\n\tremoveGeojson() {\n\t\tthis.map!.removeLayer(this.geoLayer!)\n\t\tthis.featureLayers = {}\n\t}\n}\n","import React from 'react'\nimport 'leaflet/dist/leaflet.css'\nimport PropTypes from 'prop-types'\nimport LeafletMap from '../map'\n\ntype Props = {\n\tonLoad: (node: HTMLDivElement) => void\n}\n\ntype ProviderProps = {\n\tonLoad: (map: LeafletMap) => void\n}\n\nconst MapContext = React.createContext<LeafletMap | null>(null)\n\nclass LeafletWrapper extends React.Component<Props> {\n\n\tnode: HTMLDivElement | undefined\n\n\tcomponentDidMount() {\n\t\tthis.props.onLoad(this.node!)\n\t}\n\n\tshouldComponentUpdate() {\n\t\treturn false\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"app-map\"\n\t\t\t\tref={node => { this.node = node! }} />\n\t\t)\n\t}\n}\n\nexport default class MapProvider extends React.Component<ProviderProps> {\n\n\tstate = {\n\t\tmap: new LeafletMap(),\n\t\tisLoaded: false\n\t}\n\n\thandleMapLoad = (node: HTMLDivElement) => {\n\n\t\tthis.state.map.loadMap(node, {\n\t\t\turl: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n\t\t\tattribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n\t\t})\n\n\t\tthis.setState({ isLoaded: true })\n\n\t\tthis.props.onLoad(this.state.map)\n\t}\n\n\trender() {\n\t\tconst { isLoaded } = this.state\n\n\t\treturn (\n\t\t\t<MapContext.Provider value={this.state.map}>\n\t\t\t\t<div className=\"map-container\">\n\t\t\t\t\t<LeafletWrapper onLoad={this.handleMapLoad} />\n\t\t\t\t\t{isLoaded ? this.props.children : null}\n\t\t\t\t</div>\n\t\t\t</MapContext.Provider>\n\t\t)\n\t}\n}\n\nexport { MapContext }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Geojson, RegionProps, Dict } from '../models'\nimport { MapContext } from './Map'\n\n\ntype MapGeojsonProps = {\n\tgeojson: Geojson<RegionProps>,\n\tonClick: (latlng: [number, number], index: number) => void,\n\tchildren?: any\n}\n\ntype FeatureZoomProps = {\n\tindex: number,\n\tonZoomEnd: () => void\n}\n\n\nexport class MapGeojson extends React.Component<MapGeojsonProps> {\n\n\tstatic contextType = MapContext\n\n\tstatic defaultProps = {\n\t\tonClick: () => { }\n\t}\n\n\n\tcomponentDidMount() {\n\t\tconst map = this.context\n\n\t\tconst { geojson, onClick } = this.props\n\n\t\tmap.addGeojson(geojson, onClick)\n\t\tmap.refresh()\n\t\tmap.fitGeoLayer()\n\t}\n\n\tcomponentDidUpdate(prev: MapGeojsonProps) {\n\t\tconst map = this.context\n\t\tconst { geojson, onClick } = this.props\n\n\t\tif (this.props.geojson !== prev.geojson) {\n\n\t\t\tmap.removeGeojson()\n\n\t\t\tmap.addGeojson(geojson, onClick)\n\t\t\tmap.fitGeoLayer()\n\t\t\tmap.refresh()\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tconst map = this.context\n\t\tmap.removeGeojson()\n\t}\n\n\tremove() {\n\t\tconst map = this.context\n\t\tmap.removeGeojson()\n\t}\n\n\trender() {\n\t\treturn this.props.children ? this.props.children : null\n\t}\n}\n\n\nexport class FeatureZoom extends React.PureComponent<FeatureZoomProps> {\n\n\tstatic contextType = MapContext\n\n\n\tcomponentDidMount() {\n\t\tconst map = this.context\n\t\tconst { index } = this.props\n\n\t\tmap.zoomToFeature(index)\n\t\tthis.props.onZoomEnd()\n\t}\n\n\trender() { return null }\n}\n","import { createSelector } from 'reselect'\nimport { feature } from 'topojson'\nimport { Dict, Store, Region, RegionProps, Feature, Geojson, Topojson } from './models'\n\ntype Props = {\n    geoID: number\n}\n\ntype RegionSelector = {\n    (s: Store, p: Props): Region[] | undefined\n}\n\n\nexport function getGeojson(store: Store, props: Props): Geojson<RegionProps> | undefined {\n    return store.geojsons[props.geoID]\n}\n\nexport function getIntensities(store: Store, props: Props): Dict<number> | undefined {\n    return store.intensityMaps[props.geoID]\n}\n\n\nfunction getRegion(props: RegionProps, intensity: number) {\n\n    const { \n        index, \n        intensity: initialIntensity, \n        ...rest \n    } = props\n\n    return {\n        index,\n        intensity,\n        props: Object.keys(rest).map(\n            key => ({ key, value: props[key] })\n        )\n    }\n}\n\nexport const getRegions: RegionSelector = createSelector(\n    getGeojson,\n    getIntensities,\n    (geo, intensityMap) => geo ? geo.features.map(\n        ({ properties }) => getRegion(properties, intensityMap![properties.index])\n    ) : undefined\n)\n","import {topoToGeo, createChoropleth} from './utility'\nimport {TopoRef, Geojson, RegionProps, Topojson, Choropleth} from './models'\n\n\nexport const browseMaps = () => ({\n    type: 'browse maps',\n    data: {}\n})\n\nexport const insertChoropleth = (id: number, geo: Geojson) => ({\n    type: 'insert choropleth',\n    data: {\n        id,\n        ...createChoropleth(geo)\n    }\n})\n\n\n\nexport const requestTopojson = (name: string, key: string, id: number) => ({\n    type: 'request topojson',\n    data: {\n        id,\n        name,\n        key\n    }\n})\n\nexport const insertToporefs = (toporefs: TopoRef[]) => ({\n    type: 'insert toporefs',\n    data: {toporefs}\n})\n\n\n\nexport const updateIntensity = (\n    geoID: number,\n    featureID: number, \n    newValue: number\n) => ({\n    type: 'update intensity',\n    data: {\n        geoID,\n        featureID,\n        newValue\n    }\n})\n\nexport const httpError = (type: string, info: object = {}) => ({\n    type: 'httpError',\n    data: {\n        type,\n        ...info\n    }\n})\n\n\n","import React, {useState} from 'react'\nimport {connect} from 'react-redux'\nimport {Layout, Button, Input} from 'antd'\nimport Editor from './Editor'\nimport Map from './Map'\nimport { MapGeojson, FeatureZoom } from './mapComponents'\nimport { Store, Dict, Region, RegionProps, Geojson } from '../models'\nimport {getGeojson, getRegions, getIntensities} from '../selectors'\nimport LeafletMap from '../map'\nimport {updateIntensity} from '../actions'\nimport {saveChoropleth} from '../utility'\n\nconst {Header, Content, Sider} = Layout\n\ntype Props = {\n\tgeoID: number,\n\tupdateIntensity: (mapID: number, featureID: number, newValue: number) => void\n} & MapProps\n\ntype MapProps = {\n\tloading: boolean,\n\tintensities?: Dict<number>,\n\tgeojson?: Geojson<RegionProps>,\n\tregions?: Region[],\n}\n\ntype State = {\n\tneedsZoom: boolean,\n\tzoomIndex: number,\n\tmap?: LeafletMap\n}\n\n\nclass MapPageContainer extends React.Component<Props, State> {\n\n\tstate: State = {\n\t\tneedsZoom: false,\n\t\tzoomIndex: 0\n\t}\n\n\n\thandleRowClick = ({ index }: { index: number }) => this.setState({\n\t\t...this.state,\n\t\tneedsZoom: true,\n\t\tzoomIndex: index,\n\t})\n\n\thandleIntensityChange = (id: number, newValue: number) => {\n\n\t\tconst { geoID } = this.props\n\t\tconst featureID = id\n\n\t\tthis.props.updateIntensity(geoID, featureID, newValue)\n\t\tthis.state.map!.updateFeature(id, newValue)\n\t}\n\n\thandleZoomEnd = () => this.setState({ needsZoom: false })\n\n\thandleMapLoad = (map: LeafletMap) => {\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tmap\n\t\t})\n\t}\n\n\thandleSaveFormSubmit = () => {\n\t\tconsole.log('sub')\n\t}\n\n\thandleSave = () => {\n\n\t\tconst { geojson, intensities } = this.props\n\n\t\tsaveChoropleth(geojson!, intensities!, 'choropleth.json')\n\t}\n\n\trender() {\n\n\t\tconst { geojson, regions, loading } = this.props\n\t\tconst { needsZoom, zoomIndex } = this.state\n\n\t\treturn (\n\t\t\t<Layout className='app-content'>\n\t\t\t\t<Sider className='app-sider'\n\t\t\t\t\ttheme='light'\n\t\t\t\t\twidth={400}>\n\t\t\t\t\t<Editor loading={loading}\n\t\t\t\t\t\tregions={regions}\n\t\t\t\t\t\tonRowClick={this.handleRowClick}\n\t\t\t\t\t\tonIntensityChange={this.handleIntensityChange} />\n\t\t\t\t</Sider>\n\t\t\t\t<Content>\n\t\t\t\t\t<Layout className='app-content'>\n\t\t\t\t\t\t<Header style={{ background: '#f2f2f2' }}>\n\t\t\t\t\t\t\t<Button icon='save' disabled={loading} onClick={this.handleSave}>Save</Button>\n\t\t\t\t\t\t</Header>\n\t\t\t\t\t\t<Content>\n\t\t\t\t\t\t\t<Map onLoad={this.handleMapLoad}>\n\t\t\t\t\t\t\t\t{geojson &&\n\t\t\t\t\t\t\t\t\t<MapGeojson geojson={geojson}>\n\t\t\t\t\t\t\t\t\t\t{needsZoom &&\n\t\t\t\t\t\t\t\t\t\t\t<FeatureZoom index={zoomIndex}\n\t\t\t\t\t\t\t\t\t\t\t\tonZoomEnd={this.handleZoomEnd} />\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</MapGeojson>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Map>\n\t\t\t\t\t\t</Content>\n\t\t\t\t\t</Layout>\n\t\t\t\t</Content>\n\t\t\t</Layout>\n\t\t)\n\t}\n}\n\nexport default connect<MapProps, {\n\tupdateIntensity: (mapID: number, featureID: number, newValue: number) => void\n},\n\t{ geoID: number }, Store>(\n\t\t(s, p) => ({\n\t\t\tgeojson: getGeojson(s, p),\n\t\t\tintensities: getIntensities(s, p),\n\t\t\tregions: getRegions(s, p),\n\t\t\tloading: !getGeojson(s, p)\n\t\t}),\n\t\t{\n\t\t\tupdateIntensity\n\t\t}\n\t)(MapPageContainer)","import React, { useEffect, useState } from 'react'\nimport {compose} from 'redux'\nimport { connect } from 'react-redux'\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom'\nimport {Layout, Button, message} from 'antd'\nimport MapBrowser from './MapBrowser'\nimport {History} from 'history'\nimport MapPage from './MapPage'\nimport {Store, Geojson, TopoRef} from '../models'\nimport { browseMaps, requestTopojson, insertChoropleth} from '../actions'\nconst {Header, Content} = Layout\n\n\ntype AppStatus = 'browsing' | 'mapping'\n\ntype Props = {\n    history: History,\n    toporefs: TopoRef[],\n    browseMaps: () => void,\n    requestTopojson: (name: string, key: string, id: number) => void,\n    onUpload: (id: number, geo: Geojson) => void\n}\n\ntype State = {\n    appStatus: AppStatus,\n    geoID?: number\n}\n\ntype AppProps = {\n    isBrowsing: boolean,\n    geoID?: number,\n    toporefs: TopoRef[],\n    onAuthentication: () => void,\n    onTopoSelect: (name: string) => void,\n    onUpload: (geo: Geojson) => void,\n    onUploadError: () => void,\n    onNewMapClick: () => void\n}\n\nconst App = ({isBrowsing, geoID, toporefs, ...actions}: AppProps) => (\n    <Layout className='app'>\n        <Header>\n     \n            <Button ghost={true} onClick={actions.onNewMapClick} >New Map</Button>\n       \n        </Header>\n        <Content>\n            <Switch>\n                <Route path='/create'\n                    render={() => isBrowsing ? <MapBrowser toporefs={toporefs}\n                        onTopoSelect={actions.onTopoSelect}\n                        onUpload={actions.onUpload}\n                        onUploadError={actions.onUploadError} /> :\n                        <MapPage geoID={geoID!} />\n                    } />\n                <Redirect to=\"/create\"/>\n            </Switch>\n        </Content>\n    </Layout>\n)\n\n\nclass AppContainer extends React.Component<Props, State> {\n\n    state: State = {\n        appStatus: 'browsing'\n    }\n\n\n    handleTopoSelect = (name: string) => {\n        const { toporefs } = this.props\n        const { key } = toporefs.find(({ name: n }) => n == name)!\n        this.setState({\n            appStatus: 'mapping',\n            geoID: Date.now()\n        }, () => {\n            this.props.requestTopojson(name, key, this.state.geoID!)\n        })\n    }\n\n    handleUpload = (geo: Geojson) => {\n        this.setState({\n            appStatus: 'mapping',\n            geoID: Date.now(),\n        }, () => { \n            const id = this.state.geoID!\n            this.props.onUpload(id, geo) \n        })\n    }\n\n    handleFileError = () => {\n        message.error('ERROR: Could not load file')\n    }\n\n    handleAuthentication = () => {\n        this.props.history.push('/mymaps')\n    }\n\n    handleNewMapClick = () => {\n        this.setState({\n            appStatus: 'browsing'\n        })\n    }\n\n    componentDidMount() { this.props.browseMaps() }\n\n\n    render() {\n\n        const {geoID} = this.state\n\n        const {\n            toporefs,\n            requestTopojson\n        } = this.props\n\n        const { appStatus } = this.state\n        const isBrowsing = appStatus == 'browsing'\n\n        return <App isBrowsing={isBrowsing} \n                    geoID={geoID}\n                    toporefs={toporefs} \n                    onAuthentication={this.handleAuthentication}\n                    onUploadError={this.handleFileError}\n                    onUpload={this.handleUpload}\n                    onTopoSelect={this.handleTopoSelect} \n                    onNewMapClick={this.handleNewMapClick}/>\n        \n    }\n}\n\nexport default compose<React.ComponentType>(\n    withRouter,\n    connect(\n        ({toporefs}: Store) => ({\n        toporefs\n        }),\n        {\n            browseMaps, \n            requestTopojson,\n            onUpload: insertChoropleth\n        }\n    )\n)(AppContainer)\n    \n","import { Dict, TopoRef, GeojsonStore, Geojson, RegionProps, IntensityMap } from './models'\nimport { ReactReduxContext } from 'react-redux';\nimport { Reducer } from 'redux'\n\n\nexport const geojsons: Reducer<GeojsonStore> = (state = {}, action) => {\n\n    switch(action.type) {\n        case 'insert choropleth': {\n\n            const {geo, id} = action.data\n            \n            return {\n                ...state,\n                [id]: geo\n            }\n        }\n        default: return state\n    }\n}\n\nexport const toporefs: Reducer<TopoRef[]> = (state = [], action) => {\n\n    switch(action.type) {\n        case 'insert toporefs': \n            return action.data.toporefs\n        default: return state\n    }\n}\n\nexport const intensityMaps: Reducer<Dict<IntensityMap>> = (state = {}, action) => {\n\n    switch(action.type) {\n        case 'insert choropleth': {\n            const {id, intensities} = action.data \n            return {\n                ...state, \n                [id]: intensities\n            }\n        }\n        case 'update intensity': {\n            const {geoID, featureID, newValue} = action.data\n            return {\n                ...state,\n                [geoID]: {\n                    ...state[geoID],\n                    [featureID]: newValue\n                }\n            }\n        }\n        default: return state\n    }\n}","import { composeWithDevTools } from 'redux-devtools-extension' /* REMOVE IN PRODUCTION !!! */\nimport { combineReducers, createStore, applyMiddleware } from 'redux'\nimport { combineEpics, createEpicMiddleware } from 'redux-observable'\nimport { ajax } from 'rxjs/ajax'\nimport * as epics from './epics'\nimport * as reducers from './reducers'\n\nconst base = 'https://raw.githubusercontent.com/cory17/react-choropleth/master/api/'\n\nconst getFile = (url: string) => ajax.getJSON(base + url)\n\nconst rootEpic = combineEpics(\n    epics.topojson,\n    epics.toporefs\n)\n\nconst epicMiddleware = createEpicMiddleware(\n    { dependencies: { getFile } }\n)\n\n\nconst rootReducer = combineReducers(reducers)\n\n\nconst store = createStore(\n    rootReducer,\n    {},\n    process.env.NODE_ENV === 'development' ? composeWithDevTools(\n        applyMiddleware(\n            epicMiddleware\n        )\n    ) : applyMiddleware(\n        epicMiddleware\n    ) \n)\n\nepicMiddleware.run(rootEpic)\n\nexport default store\n","import {switchMap, map, catchError, pluck} from 'rxjs/operators'\nimport {of, pipe} from 'rxjs'\nimport {Epic, ofType} from 'redux-observable'\nimport * as actions from './actions'\nimport { insertChoropleth, insertToporefs, httpError } from './actions' \nimport {Topojson, TopoRef} from './models'\nimport {topoToGeo} from './utility'\n\nexport const topojson: Epic = (action$, _, { getFile }) => action$\n\t.pipe(\n\t\tofType('request topojson'),\n\t\tpluck('data'),\n\t\tswitchMap(({ id, key, name }) => getFile(`topojson/${name}.json`)\n\t\t\t.pipe(\n\t\t\t\tmap((topo: Topojson) => insertChoropleth(id, topoToGeo(topo))),\n\t\t\t\tcatchError( () => of(httpError('topojson', {id})))\n\t\t\t)\n\t\t)\n\t)\n\nexport const toporefs: Epic = (action$, _, { getFile }) => action$\n\t.pipe(\n\t\tofType('browse maps'),\n\t\tswitchMap(() => getFile('toporefs.json')\n\t\t\t.pipe(\n\t\t\t\tmap(({ toporefs }: { toporefs: TopoRef[] }) => insertToporefs(toporefs)),\n\t\t\t\tcatchError( () => of(httpError('toporefs') ))\n\t\t\t)\n\t\t)\n\t)\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { LocaleProvider } from 'antd'\nimport { BrowserRouter } from 'react-router-dom'\nimport enUS from 'antd/lib/locale-provider/en_US'\nimport './index.css'\nimport App from './components/App'\nimport store from './storeConfiguration'\n\nReactDOM.render(\n    <LocaleProvider locale={enUS}>\n        <Provider store={store}>\n            <BrowserRouter>\n             <App/>\n            </BrowserRouter>\n        </Provider>\n    </LocaleProvider>,\n    document.getElementById('root')\n)\n\n"],"sourceRoot":""}